"
This demo shows, how to create a simple form with basic elements and how to connect this form to a model. 

In this case, the model is represented by instances of the class `SpecDemoFormModel`, instance created in the `#initialize` method. It is a simple structure-like class with some default values. The model is not held directly but using a value holder named announcingObject (see `SpPresenterWithModel>>#model:`). The encapsulating value holder would not be needed if our model would be a subclass of ""Model"" (instances of Model provide an announcer by default).

This component has two main subcomponents. The form and a table that shows the current state of the model.

The form is a standalone Spec presenter, an instance of `SpDemoStandaloneFormPresenter`. It works with two instances of the model, ""workingModel"" which holds a working copy of the model and a model shared with its parent. When the form is restored, the working copy of the model is thrown away and replaced with a new copy of the model. When the form is submitted, the new model is stored (into the value holder and its change is propagated so the table showing the state of the model is refreshed).

The data exchanged between the model and form elements is done in these methods:
`SpDemoStandaloneFormPresenter>>#fillFormWithWorkingModel`
`SpDemoStandaloneFormPresenter>>#fillModelWithFormContent`

The two parts of this window (form and table) should be rendered in boxes with an outline. Spec in Morphic does not have such functionality now. 
`SpDemoLabeledPresenter` is used now.

Text input for number 1 is limited directly on the level of user input. See `SpDemoStandaloneFormPresenter>>#initializePresenters` and `SpDemoStandaloneFormPresenter>>#connectPresenters`. 
"
Class {
	#name : 'SpDemoFormPresenter',
	#superclass : 'SpPresenterWithModel',
	#instVars : [
		'form',
		'resultPane',
		'table'
	],
	#category : 'Spec2-Examples-Demo-Forms',
	#package : 'Spec2-Examples',
	#tag : 'Demo-Forms'
}

{ #category : 'layout' }
SpDemoFormPresenter >> defaultLayout [

	^ SpPanedLayout newLeftToRight
		  positionOfSlider: (StandardFonts defaultFont widthOfString: 'M') * 35;
		  add: form;
		  add: resultPane;
		  yourself
]

{ #category : 'initialization' }
SpDemoFormPresenter >> initialize [
	self model: SpDemoFormModel new.
	super initialize
]

{ #category : 'initialization' }
SpDemoFormPresenter >> initializePresenters [

	form := self newPresenter 
		layout: (SpBoxLayout newTopToBottom
			add: 'form' expand: false;
			add: (self instantiate: SpDemoStandaloneFormPresenter on: self announcingObject);
			yourself);
		yourself.

	resultPane := self newPresenter 
		layout: (SpBoxLayout newTopToBottom
			add: 'result' expand: false;
			add: (table := self newTable);
			yourself);
		yourself.

	table
		addColumn: (SpStringTableColumn title: 'Name' evaluated: #key);
		addColumn: (SpStringTableColumn title: 'Value' evaluated: #value);
		items: self model elements;
		beResizable
]

{ #category : 'initialization' }
SpDemoFormPresenter >> modelChanged [

	table items: self model elements
]

{ #category : 'option list presenter' }
SpDemoFormPresenter >> optionIcon [
	
	^ self iconNamed: #smallWindow
]

{ #category : 'option list presenter' }
SpDemoFormPresenter >> optionTitle [

	^ 'Form Presenter'
]

{ #category : 'accessing' }
SpDemoFormPresenter >> table [
	^ table
]

{ #category : 'accessing' }
SpDemoFormPresenter >> table: anObject [
	table := anObject
]
